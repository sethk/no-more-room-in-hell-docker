name: Docker

on:
  # manually run
  workflow_dispatch:

  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: no-more-room-in-hell

jobs:
  push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.DOCKER_IMAGE_PAT }}" | docker login https://${{ secrets.DOCKER_IMAGE_SERVER }} -u ${{ DOCKER_IMAGE_USER }} --password-stdin

      - name: Build Image
        run: docker build . --file Dockerfile -t $IMAGE_NAME --cache-from ${{ secrets.DOCKER_IMAGE_SERVER }}/${{ DOCKER_IMAGE_USER }}/no-more-room-in-hell:latest

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=${{ secrets.DOCKER_IMAGE_SERVER }}/${{ secrets.DOCKER_IMAGE_USER }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
